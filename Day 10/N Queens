class Solution {
public:
    void solve(int col,vector<string>& board, vector<vector<string>>&ans,vector<int>&leftRow,vector<int>&upDig,vector<int>&lowDig,int n){
        if(col==n){
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++){
            if(leftRow[row]==0 && upDig[n-1+col-row]==0 && lowDig[row+col]==0){
                board[row][col]='Q';
                leftRow[row]=1;
                upDig[n-1+col-row]=1;
                 lowDig[row+col]=1;
                 solve(col+1,board,ans,leftRow,upDig,lowDig,n);
                 board[row][col]='.';
                leftRow[row]=0;
                upDig[n-1+col-row]=0;
                 lowDig[row+col]=0;
            }
        }

    }

public:
    vector<vector<string>> solveNQueens(int n) {
      vector<vector<string>> ans;
      vector<string> board(n);
      string s(n,'.');
      for(int i=0; i<n; i++) {
          board[i]=s;
      } 
      vector<int> leftRow(n,0), upDig(2*n-1,0), lowDig(2*n-1,0);
      solve(0,board,ans,leftRow,upDig,lowDig,n);
      return ans;
    }
};
